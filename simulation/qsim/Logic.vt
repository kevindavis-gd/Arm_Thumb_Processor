// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2019 12:54:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Logic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Logic_vlg_sample_tst(
	Logic_exe,
	Logic_in,
	Logic_upd,
	sampler_tx
);
input  Logic_exe;
input [15:0] Logic_in;
input  Logic_upd;
output sampler_tx;

reg sample;
time current_time;
always @(Logic_exe or Logic_in or Logic_upd)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Logic_vlg_check_tst (
	a0,
	a1,
	a2,
	a3,
	a4,
	a5,
	a6,
	b0,
	b1,
	b2,
	b3,
	b4,
	b5,
	b6,
	reg0_valueout,
	reg1_valueout,
	regT_valueout,
	sampler_rx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  a4;
input  a5;
input  a6;
input  b0;
input  b1;
input  b2;
input  b3;
input  b4;
input  b5;
input  b6;
input [7:0] reg0_valueout;
input [7:0] reg1_valueout;
input [7:0] regT_valueout;
input sampler_rx;

reg  a0_expected;
reg  a1_expected;
reg  a2_expected;
reg  a3_expected;
reg  a4_expected;
reg  a5_expected;
reg  a6_expected;
reg  b0_expected;
reg  b1_expected;
reg  b2_expected;
reg  b3_expected;
reg  b4_expected;
reg  b5_expected;
reg  b6_expected;
reg [7:0] reg0_valueout_expected;
reg [7:0] reg1_valueout_expected;
reg [7:0] regT_valueout_expected;

reg  a0_prev;
reg  a1_prev;
reg  a2_prev;
reg  a3_prev;
reg  a4_prev;
reg  a5_prev;
reg  a6_prev;
reg  b0_prev;
reg  b1_prev;
reg  b2_prev;
reg  b3_prev;
reg  b4_prev;
reg  b5_prev;
reg  b6_prev;
reg [7:0] reg0_valueout_prev;
reg [7:0] reg1_valueout_prev;
reg [7:0] regT_valueout_prev;

reg  a0_expected_prev;
reg  a1_expected_prev;
reg  a2_expected_prev;
reg  a3_expected_prev;
reg  a4_expected_prev;
reg  a5_expected_prev;
reg  a6_expected_prev;
reg  b0_expected_prev;
reg  b1_expected_prev;
reg  b2_expected_prev;
reg  b3_expected_prev;
reg  b4_expected_prev;
reg  b5_expected_prev;
reg  b6_expected_prev;
reg [7:0] reg0_valueout_expected_prev;
reg [7:0] reg1_valueout_expected_prev;
reg [7:0] regT_valueout_expected_prev;

reg  last_a0_exp;
reg  last_a1_exp;
reg  last_a2_exp;
reg  last_a3_exp;
reg  last_a4_exp;
reg  last_a5_exp;
reg  last_a6_exp;
reg  last_b0_exp;
reg  last_b1_exp;
reg  last_b2_exp;
reg  last_b3_exp;
reg  last_b4_exp;
reg  last_b5_exp;
reg  last_b6_exp;
reg [7:0] last_reg0_valueout_exp;
reg [7:0] last_reg1_valueout_exp;
reg [7:0] last_regT_valueout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	a0_prev = a0;
	a1_prev = a1;
	a2_prev = a2;
	a3_prev = a3;
	a4_prev = a4;
	a5_prev = a5;
	a6_prev = a6;
	b0_prev = b0;
	b1_prev = b1;
	b2_prev = b2;
	b3_prev = b3;
	b4_prev = b4;
	b5_prev = b5;
	b6_prev = b6;
	reg0_valueout_prev = reg0_valueout;
	reg1_valueout_prev = reg1_valueout;
	regT_valueout_prev = regT_valueout;
end

// update expected /o prevs

always @(trigger)
begin
	a0_expected_prev = a0_expected;
	a1_expected_prev = a1_expected;
	a2_expected_prev = a2_expected;
	a3_expected_prev = a3_expected;
	a4_expected_prev = a4_expected;
	a5_expected_prev = a5_expected;
	a6_expected_prev = a6_expected;
	b0_expected_prev = b0_expected;
	b1_expected_prev = b1_expected;
	b2_expected_prev = b2_expected;
	b3_expected_prev = b3_expected;
	b4_expected_prev = b4_expected;
	b5_expected_prev = b5_expected;
	b6_expected_prev = b6_expected;
	reg0_valueout_expected_prev = reg0_valueout_expected;
	reg1_valueout_expected_prev = reg1_valueout_expected;
	regT_valueout_expected_prev = regT_valueout_expected;
end



// expected a0
initial
begin
	a0_expected = 1'bX;
end 

// expected a1
initial
begin
	a1_expected = 1'bX;
end 

// expected a2
initial
begin
	a2_expected = 1'bX;
end 

// expected a3
initial
begin
	a3_expected = 1'bX;
end 

// expected a4
initial
begin
	a4_expected = 1'bX;
end 

// expected a5
initial
begin
	a5_expected = 1'bX;
end 

// expected a6
initial
begin
	a6_expected = 1'bX;
end 

// expected b0
initial
begin
	b0_expected = 1'bX;
end 

// expected b1
initial
begin
	b1_expected = 1'bX;
end 

// expected b2
initial
begin
	b2_expected = 1'bX;
end 

// expected b3
initial
begin
	b3_expected = 1'bX;
end 

// expected b4
initial
begin
	b4_expected = 1'bX;
end 

// expected b5
initial
begin
	b5_expected = 1'bX;
end 

// expected b6
initial
begin
	b6_expected = 1'bX;
end 
// expected reg0_valueout[ 7 ]
initial
begin
	reg0_valueout_expected[7] = 1'bX;
end 
// expected reg0_valueout[ 6 ]
initial
begin
	reg0_valueout_expected[6] = 1'bX;
end 
// expected reg0_valueout[ 5 ]
initial
begin
	reg0_valueout_expected[5] = 1'bX;
end 
// expected reg0_valueout[ 4 ]
initial
begin
	reg0_valueout_expected[4] = 1'bX;
end 
// expected reg0_valueout[ 3 ]
initial
begin
	reg0_valueout_expected[3] = 1'bX;
end 
// expected reg0_valueout[ 2 ]
initial
begin
	reg0_valueout_expected[2] = 1'bX;
end 
// expected reg0_valueout[ 1 ]
initial
begin
	reg0_valueout_expected[1] = 1'bX;
end 
// expected reg0_valueout[ 0 ]
initial
begin
	reg0_valueout_expected[0] = 1'bX;
end 
// expected reg1_valueout[ 7 ]
initial
begin
	reg1_valueout_expected[7] = 1'bX;
end 
// expected reg1_valueout[ 6 ]
initial
begin
	reg1_valueout_expected[6] = 1'bX;
end 
// expected reg1_valueout[ 5 ]
initial
begin
	reg1_valueout_expected[5] = 1'bX;
end 
// expected reg1_valueout[ 4 ]
initial
begin
	reg1_valueout_expected[4] = 1'bX;
end 
// expected reg1_valueout[ 3 ]
initial
begin
	reg1_valueout_expected[3] = 1'bX;
end 
// expected reg1_valueout[ 2 ]
initial
begin
	reg1_valueout_expected[2] = 1'bX;
end 
// expected reg1_valueout[ 1 ]
initial
begin
	reg1_valueout_expected[1] = 1'bX;
end 
// expected reg1_valueout[ 0 ]
initial
begin
	reg1_valueout_expected[0] = 1'bX;
end 
// expected regT_valueout[ 7 ]
initial
begin
	regT_valueout_expected[7] = 1'bX;
end 
// expected regT_valueout[ 6 ]
initial
begin
	regT_valueout_expected[6] = 1'bX;
end 
// expected regT_valueout[ 5 ]
initial
begin
	regT_valueout_expected[5] = 1'bX;
end 
// expected regT_valueout[ 4 ]
initial
begin
	regT_valueout_expected[4] = 1'bX;
end 
// expected regT_valueout[ 3 ]
initial
begin
	regT_valueout_expected[3] = 1'bX;
end 
// expected regT_valueout[ 2 ]
initial
begin
	regT_valueout_expected[2] = 1'bX;
end 
// expected regT_valueout[ 1 ]
initial
begin
	regT_valueout_expected[1] = 1'bX;
end 
// expected regT_valueout[ 0 ]
initial
begin
	regT_valueout_expected[0] = 1'bX;
end 
// generate trigger
always @(a0_expected or a0 or a1_expected or a1 or a2_expected or a2 or a3_expected or a3 or a4_expected or a4 or a5_expected or a5 or a6_expected or a6 or b0_expected or b0 or b1_expected or b1 or b2_expected or b2 or b3_expected or b3 or b4_expected or b4 or b5_expected or b5 or b6_expected or b6 or reg0_valueout_expected or reg0_valueout or reg1_valueout_expected or reg1_valueout or regT_valueout_expected or regT_valueout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a0 = %b | expected a1 = %b | expected a2 = %b | expected a3 = %b | expected a4 = %b | expected a5 = %b | expected a6 = %b | expected b0 = %b | expected b1 = %b | expected b2 = %b | expected b3 = %b | expected b4 = %b | expected b5 = %b | expected b6 = %b | expected reg0_valueout = %b | expected reg1_valueout = %b | expected regT_valueout = %b | ",a0_expected_prev,a1_expected_prev,a2_expected_prev,a3_expected_prev,a4_expected_prev,a5_expected_prev,a6_expected_prev,b0_expected_prev,b1_expected_prev,b2_expected_prev,b3_expected_prev,b4_expected_prev,b5_expected_prev,b6_expected_prev,reg0_valueout_expected_prev,reg1_valueout_expected_prev,regT_valueout_expected_prev);
	$display("| real a0 = %b | real a1 = %b | real a2 = %b | real a3 = %b | real a4 = %b | real a5 = %b | real a6 = %b | real b0 = %b | real b1 = %b | real b2 = %b | real b3 = %b | real b4 = %b | real b5 = %b | real b6 = %b | real reg0_valueout = %b | real reg1_valueout = %b | real regT_valueout = %b | ",a0_prev,a1_prev,a2_prev,a3_prev,a4_prev,a5_prev,a6_prev,b0_prev,b1_prev,b2_prev,b3_prev,b4_prev,b5_prev,b6_prev,reg0_valueout_prev,reg1_valueout_prev,regT_valueout_prev);
`endif
	if (
		( a0_expected_prev !== 1'bx ) && ( a0_prev !== a0_expected_prev )
		&& ((a0_expected_prev !== last_a0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a0_expected_prev);
		$display ("     Real value = %b", a0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a0_exp = a0_expected_prev;
	end
	if (
		( a1_expected_prev !== 1'bx ) && ( a1_prev !== a1_expected_prev )
		&& ((a1_expected_prev !== last_a1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_expected_prev);
		$display ("     Real value = %b", a1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a1_exp = a1_expected_prev;
	end
	if (
		( a2_expected_prev !== 1'bx ) && ( a2_prev !== a2_expected_prev )
		&& ((a2_expected_prev !== last_a2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_expected_prev);
		$display ("     Real value = %b", a2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a2_exp = a2_expected_prev;
	end
	if (
		( a3_expected_prev !== 1'bx ) && ( a3_prev !== a3_expected_prev )
		&& ((a3_expected_prev !== last_a3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a3_expected_prev);
		$display ("     Real value = %b", a3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_a3_exp = a3_expected_prev;
	end
	if (
		( a4_expected_prev !== 1'bx ) && ( a4_prev !== a4_expected_prev )
		&& ((a4_expected_prev !== last_a4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a4_expected_prev);
		$display ("     Real value = %b", a4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_a4_exp = a4_expected_prev;
	end
	if (
		( a5_expected_prev !== 1'bx ) && ( a5_prev !== a5_expected_prev )
		&& ((a5_expected_prev !== last_a5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a5_expected_prev);
		$display ("     Real value = %b", a5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_a5_exp = a5_expected_prev;
	end
	if (
		( a6_expected_prev !== 1'bx ) && ( a6_prev !== a6_expected_prev )
		&& ((a6_expected_prev !== last_a6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a6_expected_prev);
		$display ("     Real value = %b", a6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_a6_exp = a6_expected_prev;
	end
	if (
		( b0_expected_prev !== 1'bx ) && ( b0_prev !== b0_expected_prev )
		&& ((b0_expected_prev !== last_b0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b0_expected_prev);
		$display ("     Real value = %b", b0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_b0_exp = b0_expected_prev;
	end
	if (
		( b1_expected_prev !== 1'bx ) && ( b1_prev !== b1_expected_prev )
		&& ((b1_expected_prev !== last_b1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_expected_prev);
		$display ("     Real value = %b", b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_b1_exp = b1_expected_prev;
	end
	if (
		( b2_expected_prev !== 1'bx ) && ( b2_prev !== b2_expected_prev )
		&& ((b2_expected_prev !== last_b2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_expected_prev);
		$display ("     Real value = %b", b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_b2_exp = b2_expected_prev;
	end
	if (
		( b3_expected_prev !== 1'bx ) && ( b3_prev !== b3_expected_prev )
		&& ((b3_expected_prev !== last_b3_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b3_expected_prev);
		$display ("     Real value = %b", b3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_b3_exp = b3_expected_prev;
	end
	if (
		( b4_expected_prev !== 1'bx ) && ( b4_prev !== b4_expected_prev )
		&& ((b4_expected_prev !== last_b4_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b4_expected_prev);
		$display ("     Real value = %b", b4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_b4_exp = b4_expected_prev;
	end
	if (
		( b5_expected_prev !== 1'bx ) && ( b5_prev !== b5_expected_prev )
		&& ((b5_expected_prev !== last_b5_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b5_expected_prev);
		$display ("     Real value = %b", b5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_b5_exp = b5_expected_prev;
	end
	if (
		( b6_expected_prev !== 1'bx ) && ( b6_prev !== b6_expected_prev )
		&& ((b6_expected_prev !== last_b6_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b6_expected_prev);
		$display ("     Real value = %b", b6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_b6_exp = b6_expected_prev;
	end
	if (
		( reg0_valueout_expected_prev[0] !== 1'bx ) && ( reg0_valueout_prev[0] !== reg0_valueout_expected_prev[0] )
		&& ((reg0_valueout_expected_prev[0] !== last_reg0_valueout_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[0] = reg0_valueout_expected_prev[0];
	end
	if (
		( reg0_valueout_expected_prev[1] !== 1'bx ) && ( reg0_valueout_prev[1] !== reg0_valueout_expected_prev[1] )
		&& ((reg0_valueout_expected_prev[1] !== last_reg0_valueout_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[1] = reg0_valueout_expected_prev[1];
	end
	if (
		( reg0_valueout_expected_prev[2] !== 1'bx ) && ( reg0_valueout_prev[2] !== reg0_valueout_expected_prev[2] )
		&& ((reg0_valueout_expected_prev[2] !== last_reg0_valueout_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[2] = reg0_valueout_expected_prev[2];
	end
	if (
		( reg0_valueout_expected_prev[3] !== 1'bx ) && ( reg0_valueout_prev[3] !== reg0_valueout_expected_prev[3] )
		&& ((reg0_valueout_expected_prev[3] !== last_reg0_valueout_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[3] = reg0_valueout_expected_prev[3];
	end
	if (
		( reg0_valueout_expected_prev[4] !== 1'bx ) && ( reg0_valueout_prev[4] !== reg0_valueout_expected_prev[4] )
		&& ((reg0_valueout_expected_prev[4] !== last_reg0_valueout_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[4] = reg0_valueout_expected_prev[4];
	end
	if (
		( reg0_valueout_expected_prev[5] !== 1'bx ) && ( reg0_valueout_prev[5] !== reg0_valueout_expected_prev[5] )
		&& ((reg0_valueout_expected_prev[5] !== last_reg0_valueout_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[5] = reg0_valueout_expected_prev[5];
	end
	if (
		( reg0_valueout_expected_prev[6] !== 1'bx ) && ( reg0_valueout_prev[6] !== reg0_valueout_expected_prev[6] )
		&& ((reg0_valueout_expected_prev[6] !== last_reg0_valueout_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[6] = reg0_valueout_expected_prev[6];
	end
	if (
		( reg0_valueout_expected_prev[7] !== 1'bx ) && ( reg0_valueout_prev[7] !== reg0_valueout_expected_prev[7] )
		&& ((reg0_valueout_expected_prev[7] !== last_reg0_valueout_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg0_valueout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg0_valueout_expected_prev);
		$display ("     Real value = %b", reg0_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg0_valueout_exp[7] = reg0_valueout_expected_prev[7];
	end
	if (
		( reg1_valueout_expected_prev[0] !== 1'bx ) && ( reg1_valueout_prev[0] !== reg1_valueout_expected_prev[0] )
		&& ((reg1_valueout_expected_prev[0] !== last_reg1_valueout_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[0] = reg1_valueout_expected_prev[0];
	end
	if (
		( reg1_valueout_expected_prev[1] !== 1'bx ) && ( reg1_valueout_prev[1] !== reg1_valueout_expected_prev[1] )
		&& ((reg1_valueout_expected_prev[1] !== last_reg1_valueout_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[1] = reg1_valueout_expected_prev[1];
	end
	if (
		( reg1_valueout_expected_prev[2] !== 1'bx ) && ( reg1_valueout_prev[2] !== reg1_valueout_expected_prev[2] )
		&& ((reg1_valueout_expected_prev[2] !== last_reg1_valueout_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[2] = reg1_valueout_expected_prev[2];
	end
	if (
		( reg1_valueout_expected_prev[3] !== 1'bx ) && ( reg1_valueout_prev[3] !== reg1_valueout_expected_prev[3] )
		&& ((reg1_valueout_expected_prev[3] !== last_reg1_valueout_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[3] = reg1_valueout_expected_prev[3];
	end
	if (
		( reg1_valueout_expected_prev[4] !== 1'bx ) && ( reg1_valueout_prev[4] !== reg1_valueout_expected_prev[4] )
		&& ((reg1_valueout_expected_prev[4] !== last_reg1_valueout_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[4] = reg1_valueout_expected_prev[4];
	end
	if (
		( reg1_valueout_expected_prev[5] !== 1'bx ) && ( reg1_valueout_prev[5] !== reg1_valueout_expected_prev[5] )
		&& ((reg1_valueout_expected_prev[5] !== last_reg1_valueout_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[5] = reg1_valueout_expected_prev[5];
	end
	if (
		( reg1_valueout_expected_prev[6] !== 1'bx ) && ( reg1_valueout_prev[6] !== reg1_valueout_expected_prev[6] )
		&& ((reg1_valueout_expected_prev[6] !== last_reg1_valueout_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[6] = reg1_valueout_expected_prev[6];
	end
	if (
		( reg1_valueout_expected_prev[7] !== 1'bx ) && ( reg1_valueout_prev[7] !== reg1_valueout_expected_prev[7] )
		&& ((reg1_valueout_expected_prev[7] !== last_reg1_valueout_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_valueout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_valueout_expected_prev);
		$display ("     Real value = %b", reg1_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_reg1_valueout_exp[7] = reg1_valueout_expected_prev[7];
	end
	if (
		( regT_valueout_expected_prev[0] !== 1'bx ) && ( regT_valueout_prev[0] !== regT_valueout_expected_prev[0] )
		&& ((regT_valueout_expected_prev[0] !== last_regT_valueout_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[0] = regT_valueout_expected_prev[0];
	end
	if (
		( regT_valueout_expected_prev[1] !== 1'bx ) && ( regT_valueout_prev[1] !== regT_valueout_expected_prev[1] )
		&& ((regT_valueout_expected_prev[1] !== last_regT_valueout_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[1] = regT_valueout_expected_prev[1];
	end
	if (
		( regT_valueout_expected_prev[2] !== 1'bx ) && ( regT_valueout_prev[2] !== regT_valueout_expected_prev[2] )
		&& ((regT_valueout_expected_prev[2] !== last_regT_valueout_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[2] = regT_valueout_expected_prev[2];
	end
	if (
		( regT_valueout_expected_prev[3] !== 1'bx ) && ( regT_valueout_prev[3] !== regT_valueout_expected_prev[3] )
		&& ((regT_valueout_expected_prev[3] !== last_regT_valueout_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[3] = regT_valueout_expected_prev[3];
	end
	if (
		( regT_valueout_expected_prev[4] !== 1'bx ) && ( regT_valueout_prev[4] !== regT_valueout_expected_prev[4] )
		&& ((regT_valueout_expected_prev[4] !== last_regT_valueout_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[4] = regT_valueout_expected_prev[4];
	end
	if (
		( regT_valueout_expected_prev[5] !== 1'bx ) && ( regT_valueout_prev[5] !== regT_valueout_expected_prev[5] )
		&& ((regT_valueout_expected_prev[5] !== last_regT_valueout_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[5] = regT_valueout_expected_prev[5];
	end
	if (
		( regT_valueout_expected_prev[6] !== 1'bx ) && ( regT_valueout_prev[6] !== regT_valueout_expected_prev[6] )
		&& ((regT_valueout_expected_prev[6] !== last_regT_valueout_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[6] = regT_valueout_expected_prev[6];
	end
	if (
		( regT_valueout_expected_prev[7] !== 1'bx ) && ( regT_valueout_prev[7] !== regT_valueout_expected_prev[7] )
		&& ((regT_valueout_expected_prev[7] !== last_regT_valueout_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regT_valueout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regT_valueout_expected_prev);
		$display ("     Real value = %b", regT_valueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_regT_valueout_exp[7] = regT_valueout_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Logic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Logic_exe;
reg [15:0] Logic_in;
reg Logic_upd;
// wires                                               
wire a0;
wire a1;
wire a2;
wire a3;
wire a4;
wire a5;
wire a6;
wire b0;
wire b1;
wire b2;
wire b3;
wire b4;
wire b5;
wire b6;
wire [7:0] reg0_valueout;
wire [7:0] reg1_valueout;
wire [7:0] regT_valueout;

wire sampler;                             

// assign statements (if any)                          
Logic i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.b6(b6),
	.Logic_exe(Logic_exe),
	.Logic_in(Logic_in),
	.Logic_upd(Logic_upd),
	.reg0_valueout(reg0_valueout),
	.reg1_valueout(reg1_valueout),
	.regT_valueout(regT_valueout)
);

// Logic_exe
initial
begin
	Logic_exe = 1'b0;
	Logic_exe = #10000 1'b1;
	Logic_exe = #10000 1'b0;
	Logic_exe = #170000 1'b1;
	Logic_exe = #10000 1'b0;
	Logic_exe = #140000 1'b1;
	Logic_exe = #10000 1'b0;
end 
// Logic_in[ 15 ]
initial
begin
	Logic_in[15] = 1'b0;
end 
// Logic_in[ 14 ]
initial
begin
	Logic_in[14] = 1'b0;
end 
// Logic_in[ 13 ]
initial
begin
	Logic_in[13] = 1'b1;
	Logic_in[13] = #330000 1'b0;
end 
// Logic_in[ 12 ]
initial
begin
	Logic_in[12] = 1'b0;
end 
// Logic_in[ 11 ]
initial
begin
	Logic_in[11] = 1'b0;
end 
// Logic_in[ 10 ]
initial
begin
	Logic_in[10] = 1'b0;
end 
// Logic_in[ 9 ]
initial
begin
	Logic_in[9] = 1'b0;
end 
// Logic_in[ 8 ]
initial
begin
	Logic_in[8] = 1'b0;
	Logic_in[8] = #180000 1'b1;
	Logic_in[8] = #150000 1'b0;
end 
// Logic_in[ 7 ]
initial
begin
	Logic_in[7] = 1'b0;
end 
// Logic_in[ 6 ]
initial
begin
	Logic_in[6] = 1'b0;
	Logic_in[6] = #330000 1'b1;
	Logic_in[6] = #200000 1'b0;
end 
// Logic_in[ 5 ]
initial
begin
	Logic_in[5] = 1'b0;
end 
// Logic_in[ 4 ]
initial
begin
	Logic_in[4] = 1'b0;
end 
// Logic_in[ 3 ]
initial
begin
	Logic_in[3] = 1'b0;
end 
// Logic_in[ 2 ]
initial
begin
	Logic_in[2] = 1'b0;
end 
// Logic_in[ 1 ]
initial
begin
	Logic_in[1] = 1'b0;
	Logic_in[1] = #180000 1'b1;
	Logic_in[1] = #150000 1'b0;
end 
// Logic_in[ 0 ]
initial
begin
	Logic_in[0] = 1'b1;
	Logic_in[0] = #330000 1'b0;
end 

// Logic_upd
initial
begin
	Logic_upd = 1'b0;
	Logic_upd = #140000 1'b1;
	Logic_upd = #10000 1'b0;
	Logic_upd = #150000 1'b1;
	Logic_upd = #10000 1'b0;
	Logic_upd = #190000 1'b1;
	Logic_upd = #10000 1'b0;
end 

Logic_vlg_sample_tst tb_sample (
	.Logic_exe(Logic_exe),
	.Logic_in(Logic_in),
	.Logic_upd(Logic_upd),
	.sampler_tx(sampler)
);

Logic_vlg_check_tst tb_out(
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.b6(b6),
	.reg0_valueout(reg0_valueout),
	.reg1_valueout(reg1_valueout),
	.regT_valueout(regT_valueout),
	.sampler_rx(sampler)
);
endmodule

